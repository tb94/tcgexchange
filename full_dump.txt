📁 PROJECT STRUCTURE:
.
├── .dockerignore
├── .env
├── .gitignore
├── Dockerfile
├── README.md
├── config
│   └── config.json
├── database.sqlite
├── docker-compose.yml
├── full_dump.txt
├── migrations
│   ├── 20250331052746-create-user.js
│   └── 20250403184205-create-users.js
├── models
│   ├── index.js
│   └── user.js
├── package-lock.json
├── package.json
├── public
│   ├── css
│   │   ├── login.css
│   │   └── search.css
│   ├── index.html
│   ├── js
│   │   ├── index.js
│   │   ├── login.js
│   │   ├── register.js
│   │   ├── search.js
│   │   └── util.js
│   ├── login.html
│   ├── register.html
│   └── search.html
└── src
    ├── controllers
    │   └── usersController.js
    ├── middlewares
    │   └── auth.js
    ├── routes
    │   ├── cards.js
    │   └── users.js
    └── server.js

11 directories, 31 files

📄 FILE CONTENTS:

====================
📄 ./.gitignore
====================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# sqlite3
*.sqlite

====================
📄 ./.env
====================
PORT=3000
POKEMON_TCG_API_KEY=7c5b6aae-dc58-4827-896d-9c054bca3cbf
JWT_SECRET=6ba745d3dea26fe9f16ba58a9764bd05d05f902961175d3a14a190f57fc356b0

====================
📄 ./package.json
====================
{
    "name": "tcgexchange",
    "version": "0.0.1",
    "description": "TCG Portfolio Sharing",
    "main": "src/server.js",
    "scripts": {
        "dev": "node src/server.js"
    },
    "author": "Tim Bretz & Kyle LaPointe",
    "license": "ISC",
    "dependencies": {
        "axios": "^1.8.4",
        "bcryptjs": "^3.0.2",
        "cors": "^2.8.5",
        "dotenv": "^16.4.7",
        "express": "^4.21.2",
        "express-validator": "^7.2.1",
        "jsonwebtoken": "^9.0.2",
        "mysql2": "^3.14.0",
        "sequelize": "^6.37.7",
        "sqlite3": "^5.1.7"
    },
    "devDependencies": {
        "sequelize-cli": "^6.6.2"
    }
}

====================
📄 ./Dockerfile
====================
FROM node:18-alpine

WORKDIR /usr/src/app

ENV database__client=sqlite

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.npm to speed up subsequent builds.
# Leverage a bind mounts to package.json and package-lock.json to avoid having to copy them into
# into this layer.
RUN --mount=type=bind,source=package.json,target=package.json \
    --mount=type=bind,source=package-lock.json,target=package-lock.json \
    --mount=type=cache,target=/root/.npm \
    npm ci --omit=dev

# # Run the application as a non-root user.
# USER node

# Copy the rest of the source files into the image.
COPY . .

# Expose the port that the application listens on.
EXPOSE 3000

# Run the application.
CMD node src/server.js

====================
📄 ./config/config.json
====================
{
  "development": {
    "dialect": "sqlite",
    "storage": "database.sqlite"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}


====================
📄 ./README.md
====================
# TCGexchange

## How does it work?

A Nodejs server (using express) responds at https://localhost:3000 with a sqlite database

### Initialize Dev Dependencies

```
$ npm install

```


### Initializing a database

```
$ npx sequelize-cli db:migrate

```


### Without Docker

```
$ npm run dev

```

### With Docker

```
$ docker compose up --build

```

====================
📄 ./src/controllers/usersController.js
====================
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { User } = require('../../models');

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

// User Signup
exports.signup = async (req, res) => {
  try {
    const { username, password } = req.body;

    if (!username || !password) {
      return res.status(400).json({ error: 'Username and password are required' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    // look for existing user, if a user does not exist `created` will be true and the new user instance will be returned
    const [user, created] = await User.findOrCreate({
      where: { username: username },
      defaults: { password: hashedPassword } // this lets us set the password only if the user does not exist yet.
    });

    if (!created) {
      return res.status(409).json({ error: 'Username is already taken' });
    }

    const token = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: '1h' });

    res.json({ token });
  } catch (error) {
    console.error('Signup error:', error);
    res.status(500).json({ error: error.message });
  }
};

// User Login
exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;

    const user = await User.findOne({ where: { username } });
    if (!user) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '1h' });

    res.json({ token });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};

// Token Validation
exports.validate = async (req, res) => {
  res.sendStatus(200); // Token is valid if it passes auth middleware
}

// Get Current User
exports.getCurrentUser = async (req, res) => {
  try {
    const user = await User.findByPk(req.user.userId, {
      attributes: ['id', 'username']
    });
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
};


====================
📄 ./src/server.js
====================
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const usersRoutes = require('./routes/users');
const cardRoutes = require('./routes/cards');
const PORT = process.env.PORT || 3000;

const app = express();
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

app.use('/auth', usersRoutes);
app.use('/cards', cardRoutes);

app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});


====================
📄 ./src/middlewares/auth.js
====================
const jwt = require('jsonwebtoken');

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret';

module.exports = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: 'Authorization header missing or malformed' });
  }

  const token = authHeader.split(' ')[1];

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded; // This attaches the user info to the request
    next();
  } catch (err) {
    return res.status(401).json({ error: 'Invalid or expired token' });
  }
};


====================
📄 ./src/routes/cards.js
====================
const express = require('express');
const axios = require('axios');
const { body, validationResult } = require('express-validator');
require('dotenv').config();

const router = express.Router();

// Card Search Endpoint
router.post('/search',
  [
    // Validation Rules
    body('name').optional().isString(),
    body('set').optional().isString(),
    body('rarity').optional().isString(),
    body('types').optional().isArray(),
    body('subtypes').optional().isArray(),
    body('hp').optional().isInt({ min: 10 }), // HP should be a positive integer
    body('supertype').optional().isString(),
    body('page').optional().isInt({ min: 1 }),
    body('pageSize').optional().isInt({ min: 1, max: 100 }) // Limit to 100 results per page
  ],
  async (req, res) => {
    // Handle validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    // Extract filters from request body
    const { name, set, rarity, types, subtypes, hp, supertype, page = 1, pageSize = 20 } = req.body;

    try {
      // Build query string for PokémonTCG API
      let query = [];
      if (name) query.push(`name:${name}`);
      if (set) query.push(`set.id:${set}`);
      if (rarity) query.push(`rarity:${rarity}`);
      if (types && types.length) query.push(`types:${types.join(',')}`);
      if (subtypes && subtypes.length) query.push(`subtypes:${subtypes.join(',')}`);
      if (hp) query.push(`hp:${hp}`);
      if (supertype) query.push(`supertype:${supertype}`);

      // API Request
      const response = await axios.get('https://api.pokemontcg.io/v2/cards', {
        headers: { 'X-Api-Key': process.env.POKEMON_TCG_API_KEY },
        params: {
          q: query.join(' '),
          page,
          pageSize,
          orderBy: 'name' // Default sorting by name
        }
      });

      res.json(response.data);
    } catch (error) {
      console.error('Error fetching cards:', error);
      res.status(500).json({ error: 'Failed to fetch card data' });
    }
  }
);
module.exports = router;


====================
📄 ./src/routes/users.js
====================
const express = require('express');
const usersController = require('../controllers/usersController');
const authMiddleware = require('../middlewares/auth');
const router = express.Router();

router.post('/signup', usersController.signup);
router.post('/login', usersController.login);
router.get('/validate', authMiddleware, usersController.validate);
router.get('/me', authMiddleware, usersController.getCurrentUser);

module.exports = router;


====================
📄 ./public/js/register.js
====================
/* this might be a good utility, at least calling the api. maybe we create functions for each http request type */
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('signup-form');

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;

        try {
            const response = await fetch('/auth/signup', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ username, password }),
            });

            if (response.ok) {
                const data = await response.json();
                localStorage.setItem('token', data.token);
                window.location.href = '/search.html';
            } else {
                const error = await response.json();
                alert(error.message || 'Signup failed');
            }
        } catch (err) {
            console.error('Signup error:', err);
            alert('Something went wrong.');
        }
    });
});


====================
📄 ./public/js/login.js
====================
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const username = document.getElementById('username').value.trim();
    const password = document.getElementById('password').value;

    if (!username || !password) return;

    console.log("Attempt login:", { username, password });

    const res = await fetch('/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ username, password })
    });


    const data = await res.json();
    if (!res.ok) {
        alert(data.error || 'Login failed');
    }

    // save the jwt
    localStorage.setItem('token', data.token);

    window.location.href = '/search.html';
});


====================
📄 ./public/js/search.js
====================
let currentPage = 1;
const pageSize = 20;
let loading = false;
let allCardsLoaded = false;

// infinite scroll needs to be debounced
async function searchCards(page = 1, append = false) {
    const name = document.getElementById('name').value.trim();
    const results = document.getElementById('results');

    // check if we are making a new search to clear results and reset the flag
    if (!append) {
        results.innerHTML = '';
        allCardsLoaded = false;
    }

    // no empty searches, no searching while loading, no searching after the cards have been loaded (infinite scroll)
    if (!name || loading || allCardsLoaded) return;

    loading = true;

    try {
        const res = await fetch('/cards/search', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: name, page, pageSize }),
        });

        const cards = await res.json();

        if (!cards.data || cards.data.length === 0) {
            if (!append) results.innerHTML = '<p>No cards found.</p>';
            allCardsLoaded = true;
            return;
        }

        cards.data.forEach((card) => {
            const cardEl = document.createElement('div');
            cardEl.className = 'card';
            cardEl.innerHTML = `
        <img src="${card.images.small}" alt="${card.name}" />
        <h3>${card.name}</h3>
        <button data-id="${card.id}">Add to Collection</button>
      `;
            results.appendChild(cardEl);

            requestAnimationFrame(() => {
                cardEl.classList.add('loaded');
            });
        });

        if (cards.data.length < pageSize) {
            allCardsLoaded = true;
        }

        currentPage = page;
    } catch (err) {
        console.error('Search failed:', err);
        if (!append) results.innerHTML = '<p>Something went wrong.</p>';
    } finally {
        loading = false;
    }
}

function handleScroll() {
    if (loading || allCardsLoaded) return;

    const scrollable = document.documentElement.scrollHeight - window.innerHeight;
    const scrolled = window.scrollY;

    if (scrolled >= scrollable - 200) {
        searchCards(currentPage + 1, true);
    }
}

document.getElementById('search-form').addEventListener('submit', (e) => {
    e.preventDefault();
    currentPage = 1;
    searchCards(currentPage, false);
});

window.addEventListener('scroll', handleScroll);


====================
📄 ./public/js/index.js
====================
/* more good stuff for util file in here */

const token = localStorage.getItem('token');

// check for token and validate // this should go on every page that requires being logged in
if (!token) {
    window.location.href = '/login.html';
} else {

    fetch('/auth/validate', {
        headers: { Authorization: `Bearer ${token}` }
    }).then((response) => {
        if (!response.ok) {
            localStorage.removeItem('token');
            window.location.href = '/login.html';
        }
    }).catch(() => {
        localStorage.removeItem('token');
        window.location.href = '/login.html';
    });
}

// logout and redirect to login
document.addEventListener('DOMContentLoaded', () => {
    const logoutBtn = document.getElementById('logout-btn');

    if (logoutBtn) {
        logoutBtn.addEventListener('click', () => {
            localStorage.removeItem('token');
            window.location.href = '/login.html';
        });
    }
});


====================
📄 ./public/js/util.js
====================
/**
 * Dark Mode
 */
function setTheme(isDark) {
    document.body.classList.toggle('dark', isDark);
    localStorage.setItem('darkMode', isDark);
    document.getElementById('themeToggle').checked = isDark;
}

document.getElementById('themeToggle').addEventListener('change', (e) => {
    setTheme(e.target.checked);
});

const storedTheme = localStorage.getItem('darkMode') === 'true';
setTheme(storedTheme);


====================
📄 ./public/search.html
====================
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Search Cards</title>
    <link rel="stylesheet" href="/css/search.css" />
    <link rel="stylesheet" href="/css/login.css" />
</head>

<body>
    <div class="search-container">
        <div class="toggle">
            <span>🌙 Dark Mode</span>
            <input type="checkbox" id="themeToggle" />
            <label for="themeToggle" title="Toggle Dark Mode"></label>
        </div>

        <h1>Search for Cards</h1>

        <form id="search-form">
            <input type="text" id="name" placeholder="Search cards..." required />
            <button type="submit">Search</button>
        </form>

        <div id="results" class="card-grid"></div>
        <div id="loading-spinner" style="display: none; text-align: center;">Loading more cards...</div>
        <div id="pagination" class="pagination-controls"></div>
    </div>

    <script src="/js/search.js"></script>
    <script src="/js/util.js" defer></script>
</body>

</html>

====================
📄 ./public/login.html
====================
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>TCG Exchange</title>
  <link rel="stylesheet" href="/css/login.css" />
</head>

<body>
  <div class="container">
    <div class="toggle">
      <span>🌙 Dark Mode</span>
      <input type="checkbox" id="themeToggle" />
      <label for="themeToggle" title="Toggle Dark Mode"></label>
    </div>

    <h1>🎴 TCG Exchange</h1>

    <form id="loginForm">
      <input type="text" id="username" placeholder="Username" required />
      <input type="password" id="password" placeholder="Password" required />
      <button type="submit">Log In</button>
    </form>

    <a class="small-link" href="/register.html">First time? Create a user!</a>
  </div>

  <script src="/js/login.js" defer></script>
  <script src="/js/util.js" defer></script>
</body>

</html>

====================
📄 ./public/register.html
====================
<!-- public/signup.html -->
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Sign Up</title>
  <link rel="stylesheet" href="/css/login.css" />
</head>

<body>
  <div class="container">
    <div class="toggle">
      <span>🌙 Dark Mode</span>
      <input type="checkbox" id="themeToggle" />
      <label for="themeToggle" title="Toggle Dark Mode"></label>
    </div>

    <h1>Create Account</h1>

    <form id="signup-form">
      <input type="text" id="username" placeholder="Username" required />
      <input type="password" id="password" placeholder="Password" required />
      <button type="submit">Sign Up</button>
    </form>

    <a class="small-link" href="/login.html">Already have an account? Log in</a>
  </div>

  <script src="/js/register.js"></script>
  <script src="/js/util.js" defer></script>
</body>

</html>

====================
📄 ./public/css/login.css
====================
    :root {
        --bg: #f3f4f6;
        --card-bg: #ffffff;
        --text: #111827;
        --highlight: #4f46e5;
        --button-bg: #4f46e5;
        --button-hover: #4338ca;
        --link: #6b7280;
    }

    body.dark {
        --bg: #1f2937;
        --card-bg: #374151;
        --text: #f3f4f6;
        --highlight: #6366f1;
        --button-bg: #6366f1;
        --button-hover: #818cf8;
        --link: #9ca3af;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: var(--bg);
        color: var(--text);
        margin: 0;
        padding: 2rem;
        transition: background 0.3s, color 0.3s;
    }

    .container {
        max-width: 400px;
        margin: auto;
        background: var(--card-bg);
        padding: 2rem;
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: background 0.3s;
        text-align: center;
    }

    h1 {
        font-size: 2rem;
        margin-bottom: 1.5rem;
    }

    .toggle {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .toggle input {
        display: none;
    }

    .toggle label {
        background-color: var(--highlight);
        border-radius: 20px;
        cursor: pointer;
        display: inline-block;
        height: 26px;
        position: relative;
        width: 50px;
    }

    .toggle label::after {
        content: "";
        position: absolute;
        left: 4px;
        top: 4px;
        width: 18px;
        height: 18px;
        background-color: white;
        border-radius: 50%;
        transition: transform 0.3s ease;
    }

    .toggle input:checked+label::after {
        transform: translateX(24px);
    }

    form {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    input {
        padding: 0.75rem;
        border: 1px solid #ccc;
        border-radius: 8px;
        font-size: 1rem;
        background: var(--bg);
        color: var(--text);
    }

    button {
        padding: 0.75rem;
        font-size: 1rem;
        background-color: var(--button-bg);
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.2s ease;
    }

    button:hover {
        background-color: var(--button-hover);
    }

    .small-link {
        margin-top: 0.75rem;
        font-size: 0.9rem;
        color: var(--link);
        text-decoration: none;
    }

    .small-link:hover {
        text-decoration: underline;
        color: var(--highlight);
    }

====================
📄 ./public/css/search.css
====================
.search-container {
    max-width: 900px;
    margin: auto;
    padding: 2rem;
}

form {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
}

input[type="text"] {
    flex-grow: 1;
    padding: 0.75rem;
    border-radius: 8px;
    border: 1px solid #ccc;
    font-size: 1rem;
    background: var(--bg);
    color: var(--text);
}

.card-grid {
    display: grid;
    gap: 1.5rem;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
}

.card {
    background: var(--card-bg);
    padding: 1rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s ease, opacity 0.3s ease;
    opacity: 0;
    transform: translateY(20px);
}

.card.loaded {
    opacity: 1;
    transform: translateY(0);
}

.card img {
    width: 100%;
    border-radius: 8px;
}

.card h3 {
    font-size: 1.1rem;
    margin: 0.5rem 0;
}

.card button {
    margin-top: 0.5rem;
    width: 100%;
    padding: 0.5rem;
    border: none;
    background: var(--button-bg);
    color: white;
    font-weight: bold;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.2s ease;
}

.card button:hover {
    background: var(--button-hover);
}

.pagination-controls {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1rem;
}

.pagination-controls button {
    padding: 0.5rem 1rem;
    background-color: var(--button-bg);
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

.pagination-controls button:hover {
    background-color: var(--button-hover);
}

====================
📄 ./public/index.html
====================
<!DOCTYPE html>
<html>

<head>
    <title>My App</title>
</head>

<body>
    <h1>Welcome to My App</h1>

    <button id="logout-btn">Log Out</button>

    <script src="/js/index.js" defer></script>
</body>

</html>

====================
📄 ./docker-compose.yml
====================
# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    build:
      context: .
    ports:
      - 3000:3000
      - 3306:3306
      
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

====================
📄 ./.dockerignore
====================
# Include any files or directories that you don't want to be copied to your
# container here (e.g., local build artifacts, temporary files, etc.).
#
# For more help, visit the .dockerignore file reference guide at
# https://docs.docker.com/go/build-context-dockerignore/

**/.classpath
**/.dockerignore
**/.env
**/.git
**/.gitignore
**/.project
**/.settings
**/.toolstarget
**/.vs
**/.vscode
**/.next
**/.cache
**/*.*proj.user
**/*.dbmdl
**/*.jfm
**/charts
**/docker-compose*
**/compose.y*ml
**/Dockerfile*
**/node_modules
**/npm-debug.log
**/obj
**/secrets.dev.yaml
**/values.dev.yaml
**/build
**/dist
LICENSE
README.md

====================
📄 ./models/user.js
====================
module.exports = (sequelize, DataTypes) => {
  const User = sequelize.define('User', {
    username: {
      type: DataTypes.STRING,
      allowNull: false,
      unique: true
    },
    password: {
      type: DataTypes.STRING,
      allowNull: false
    }
  });

  return User;
};


====================
📄 ./models/index.js
====================
const { Sequelize } = require('sequelize');
const config = require('../config/config.json')[process.env.NODE_ENV || 'development'];

const sequelize = new Sequelize(config);

const db = {
  sequelize,
  Sequelize,
  User: require('./user')(sequelize, Sequelize),
};

module.exports = db;


====================
📄 ./migrations/20250403184205-create-users.js
====================
'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.renameColumn('Users', "email", "username");
    await queryInterface.addColumn('Users', "password", {
      type: Sequelize.STRING,
      allowNull: false,
    });
    await queryInterface.removeColumn('Users', "name");
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Users');
  }
};


====================
📄 ./migrations/20250331052746-create-user.js
====================
'use strict';
/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Users', {
      id: {
        allowNull: false,
        autoIncrement: true,
        primaryKey: true,
        type: Sequelize.INTEGER
      },
      name: {
        type: Sequelize.STRING
      },
      email: {
        type: Sequelize.STRING
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE
      }
    });
  },
  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Users');
  }
};

====================
📄 ./full_dump.txt
====================


